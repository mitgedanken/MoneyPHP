<?php

namespace mitgedanken\Monetary;

use PHPUnit_Framework_TestCase;
use mitgedanken\Monetary\MoneyExtended,
    mitgedanken\Monetary\Currency;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-08 at 20:19:26.
 */
class MoneyExtendedTest extends PHPUnit_Framework_TestCase {
  /** Test amount. @var int */
  protected $amount;

  /** @var mitgedanken\Monetary\SimpleMoney */
  protected $usd;

  /** @var mitgedanken\Monetary\SimpleMoney */
  protected $eur;

  protected function setUp()
  {
    $usd = new Currency('USD');
    $eur = new Currency('EUR');

    $this->amount = 20;
    $this->usd = new MoneyExtended($this->amount, $usd);
    $this->eur = new MoneyExtended($this->amount, $eur);
  }

  /**
   * @test Foemmel's Conundrum
   * @covers mitgedanken\Monetary\Money::allocate
   * @/depends roundingTest
   */
  public function allocate()
  {
    $money = new MoneyExtended(0.05, new Currency('EUR'));
    $monies = $money->allocate(array(3, 7));

    $this->assertEquals(new MoneyExtended(0.015, new Currency('EUR')),
            $monies[0]);
    $this->assertEquals(new MoneyExtended(0.035, new Currency('EUR')),
            $monies[1]);
  }

  /**
   * @test
   * @covers mitgedanken\Monetary\Money::setRounding
   */
  public function roundingTest_defaults()
  {
    $amount = 9.5553;


    $expected = round($amount, 4, \PHP_ROUND_HALF_EVEN);
    $money = new MoneyExtended($amount, new Currency('EUR'));
    $money1 = $money->multiply(1);

    $this->assertEquals($expected, $money1->getAmount());


    $expected = round($amount * 2, 4, \PHP_ROUND_HALF_EVEN);
    $money = new MoneyExtended($amount, new Currency('EUR'));
    $money1 = $money->multiply(2);

    $this->assertEquals($expected, $money1->getAmount());
  }

  /**
   * @test
   * @covers mitgedanken\Monetary\Money::setRounding
   */
  public function roundingTest_HALF_UP()
  {
    $amount = 1.55;
    $expected = round($amount, 1, \PHP_ROUND_HALF_UP);
    $money = new MoneyExtended($amount, new Currency('EUR'));
    $money->setRounding(MoneyExtended::HALF_UP, 1);
    $money1 = $money->multiply(1);

    $this->assertEquals($expected, $money1->getAmount());
  }

  /**
   * @test
   * @covers mitgedanken\Monetary\Money::setRounding
   */
  public function roundingTest_HALF_DOWN()
  {
    $amount = 1.55;
    $expected = round($amount, 1, \PHP_ROUND_HALF_DOWN);
    $money = new MoneyExtended(1.55, new Currency('EUR'));
    $money->setRounding(MoneyExtended::HALF_DOWN, 1);
    $money1 = $money->multiply(1);

    $this->assertEquals($expected, $money1->getAmount());
  }

  /**
   * @test
   * @covers mitgedanken\Monetary\Money::setRounding
   */
  public function roundingTest_HALF_EVEN()
  {
    $amount = 5.45;
    $expected = round($amount, 1, \PHP_ROUND_HALF_EVEN);
    $money = new MoneyExtended($amount, new Currency('EUR'));
    $money->setRounding(MoneyExtended::HALF_EVEN, 1);
    $money1 = $money->multiply(1);

    $this->assertEquals($expected, $money1->getAmount());
  }

  /**
   * @test
   * @covers mitgedanken\Monetary\Money::setRounding
   */
  public function roundingTest_HALF_ODD()
  {
    $amount = 5.55;
    $expected = round($amount, 1, \PHP_ROUND_HALF_ODD);
    $money = new MoneyExtended($amount, new Currency('EUR'));
    $money->setRounding(MoneyExtended::HALF_ODD, 1);
    $money1 = $money->multiply(1);

    $this->assertEquals($expected, $money1->getAmount());
  }

  /**
   * @test
   * @depends multiply
   * @/depends setRoundingAlgo
   * @covers mitgedanken\Monetary\Money::setRoundingAlgo
   * @covers mitgedanken\Monetary\Money::setMultiplyAlgo
   * @covers mitgedanken\Monetary\Money::setDivideAlgo
   */
  public function closureAlgoTest()
  {
    $closure = function() {
              return 1;
            };
    Money::setRoundingAlgo($closure);
    $money = new MoneyExtended(2, new Currency('EUR'));
    $money->multiply(2);
    $this->assertEquals(2, $money->getAmount());
  }

  /**
   * @test
   * @depends setRoundingAlgo_user
   * @covers mitgedanken\Monetary\Money::setRounding
   * @covers mitgedanken\Monetary\Money::setRoundingAlgo
   */
  public function setRoundingAlgo_toDefaults()
  {
    Money::setRounding();
    Money::setRoundingAlgo();
    $expected = array('mode' => \PHP_ROUND_HALF_UP,
        'precision' => 1,
        'algorithm' => 'default');
    $this->assertEquals($expected, MoneyExtended::getRoundingStates());
  }

  /**
   * @test
   * @depends setRoundingAlgo_toDefaults
   * @covers mitgedanken\Monetary\Money::getRoundingStates
   */
  public function getRoundingStatesTest_defaults()
  {
    $expected = array('mode' => \PHP_ROUND_HALF_EVEN,
        'precision' => 4,
        'algorithm' => 'default');
    $this->assertEquals($expected, MoneyExtended::getRoundingStates());

    $money = new MoneyExtended(1, new Currency('EUR'));
    $this->assertEquals($expected, $money::getRoundingStates());
  }

  /**
   * @test
   * @depends getRoundingStatesTest_defaults
   * @covers mitgedanken\Monetary\Money::getRoundingStates
   */
  public function getRoundingStatesTest_user()
  {
    Money::setRounding(MoneyExtended::HALF_ODD, 9);
    $expected = array('mode' => \PHP_ROUND_HALF_ODD,
        'precision' => 9,
        'algorithm' => 'default');
    $this->assertEquals($expected, MoneyExtended::getRoundingStates());

    $money = new MoneyExtended(1, new Currency('EUR'));
    $this->assertEquals($expected, $money::getRoundingStates());
  }

  /**
   * @test
   * @depends getRoundingStatesTest_user
   * @covers mitgedanken\Monetary\Money::setRounding
   * @covers mitgedanken\Monetary\Money::setRoundingAlgo
   */
  public function setRoundingAlgo_user()
  {
    $closure = function() {
              return 0;
            };
    var_dump(\gettype($closure));
    Money::setRounding(MoneyExtended::HALF_UP, 1);
    Money::setRoundingAlgo($closure);
    $expected = array('mode' => \PHP_ROUND_HALF_UP,
        'precision' => 1,
        'algorithm' => 'user');
    $this->assertEquals($expected, MoneyExtended::getRoundingStates());
  }

}

